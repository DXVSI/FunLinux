# fishDisk - –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å–∫–∞–º–∏ –¥–ª—è Fish Shell
# –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ

# ============================================
# UI –ö–û–ú–ü–û–ù–ï–ù–¢–´
# ============================================

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function _disk_check_dependencies
    set -l missing_required
    set -l missing_optional

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    set -l required lsblk blkid mount umount df sudo
    for cmd in $required
        if not command -v $cmd &>/dev/null
            set -a missing_required $cmd
        end
    end

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—É–ª—É—á—à–∞—é—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
    set -l optional fzf cowsay lolcat lsof parted ntfs-3g
    for cmd in $optional
        if not command -v $cmd &>/dev/null
            set -a missing_optional $cmd
        end
    end

    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
    if test (count $missing_required) -gt 0
        echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: $missing_required"
        echo ""
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å? [Y/n]"
        read -l response

        if test "$response" = "" -o "$response" = "y" -o "$response" = "Y"
            _disk_install_packages $missing_required
        else
            return 1
        end
    end

    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ
    if test (count $missing_optional) -gt 0
        echo "‚ÑπÔ∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: $missing_optional"
        echo "–û–Ω–∏ —É–ª—É—á—à–∞—é—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã."
        echo ""
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? [Y/n]"
        read -l response

        if test "$response" = "" -o "$response" = "y" -o "$response" = "Y"
            _disk_install_packages $missing_optional
        end
    end

    return 0
end

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ dnf5/dnf (—Ç–æ–ª—å–∫–æ Fedora)
function _disk_install_packages
    set -l packages $argv

    echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é: $packages"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º dnf5 –∏–ª–∏ dnf (—Ç–æ–ª—å–∫–æ Fedora)
    if command -v dnf5 &>/dev/null
        sudo dnf5 install -y $packages
    else if command -v dnf &>/dev/null
        sudo dnf install -y $packages
    else
        echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω dnf5 –∏–ª–∏ dnf! fishDisk —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ Fedora."
        return 1
    end

    echo "‚úÖ –ü–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
end

# –ü—Ä–æ—Å—Ç–æ–µ —Ü–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ cowsay)
function _disk_message
    set -l message $argv[1]
    set -l mode $argv[2]

    switch $mode
        case success
            set_color green
            echo "‚úÖ $message"
        case error
            set_color red
            echo "‚ùå $message"
        case warning
            set_color yellow
            echo "‚ö†Ô∏è  $message"
        case info
            set_color blue
            echo "‚ÑπÔ∏è  $message"
        case '*'
            echo $message
    end
    set_color normal
end

# –û—à–∏–±–∫–∞ (–ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
function _disk_error
    _disk_message $argv[1] error
end

# –£—Å–ø–µ—Ö (–ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
function _disk_success
    _disk_message $argv[1] success
end

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–ø—Ä–æ—Å—Ç–æ–µ, –±–µ–∑ cowsay)
function _disk_warning
    _disk_message $argv[1] warning
end

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ø—Ä–æ—Å—Ç–æ–µ, –±–µ–∑ cowsay)
function _disk_info
    _disk_message $argv[1] info
end

# –í—ã–±–æ—Ä –¥–∏—Å–∫–∞ —á–µ—Ä–µ–∑ fzf
function _disk_select_device
    set -l show_mounted $argv[1]  # "mounted" –∏–ª–∏ "unmounted" –∏–ª–∏ "all" –∏–ª–∏ "setup"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ fzf
    if not command -v fzf &>/dev/null
        return 1  # fzf –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    end

    # –î–ª—è setup –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã + –ø—É—Å—Ç—ã–µ –¥–∏—Å–∫–∏
    set -l partitions_only yes
    if test "$show_mounted" = "setup"
        set partitions_only no
    end

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤
    set -l disks (_disk_list_all no $partitions_only)
    set -l filtered_disks

    for disk_info in $disks
        set -l parts (string split "|" $disk_info)
        set -l dev $parts[1]
        set -l size $parts[2]
        set -l fstype $parts[3]
        set -l label $parts[4]
        set -l mountpoint $parts[5]
        set -l usage $parts[6]
        set -l is_system $parts[7]
        set -l device_type $parts[8]

        # –î–ª—è setup —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∏—Å–∫–∏
        if test "$show_mounted" = "setup"
            if test "$device_type" = "disk"
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –¥–∏—Å–∫–∏
                if _disk_has_partitions $dev
                    continue  # —É –¥–∏—Å–∫–∞ –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º–∏ —Ä–∞–∑–¥–µ–ª—ã
                end
            end
        end

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        switch $show_mounted
            case mounted
                if test "$mountpoint" = "-"
                    continue
                end
            case unmounted
                if test "$mountpoint" != "-"
                    continue
                end
        end

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è fzf
        set -l label_display $label
        if test "$label" = "-"
            set label_display "no label"
        end

        set -l mount_display $mountpoint
        if test "$mountpoint" = "-"
            set mount_display "not mounted"
        end

        # –ü–æ–º–µ—Ç–∫–∞ –¥–ª—è –ø—É—Å—Ç—ã—Ö –¥–∏—Å–∫–æ–≤
        if test "$device_type" = "disk"
            set label_display "[empty disk - needs partitioning]"
            set fstype "raw"
        end

        # –§–æ—Ä–º–∞—Ç: device | size | fstype | label | mount
        set -l fzf_line "$dev|$size|$fstype|$label_display|$mount_display"
        set -a filtered_disks $fzf_line
    end

    if test (count $filtered_disks) -eq 0
        return 2  # –Ω–µ—Ç –¥–∏—Å–∫–æ–≤
    end

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ fzf
    set -l selected (printf "%s\n" $filtered_disks | fzf \
        --height=40% \
        --border \
        --header="–í—ã–±–µ—Ä–∏ –¥–∏—Å–∫ (Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã)" \
        --delimiter="|" \
        --with-nth=1,2,3,4,5 \
        --preview='printf "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {1}\n–†–∞–∑–º–µ—Ä: {2}\n–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: {3}\n–ú–µ—Ç–∫–∞: {4}\n–¢–æ—á–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {5}\n"' \
        --preview-window=right:40%)

    if test -z "$selected"
        return 3  # –æ—Ç–º–µ–Ω–µ–Ω–æ
    end

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    echo $selected | cut -d'|' -f1
end

# –¢–∞–±–ª–∏—Ü–∞ –¥–∏—Å–∫–æ–≤ - –∑–∞–≥–æ–ª–æ–≤–æ–∫
function _disk_table_header
    set_color blue --bold
    printf "%-15s ‚îÇ %-8s ‚îÇ %-6s ‚îÇ %-15s ‚îÇ %-20s ‚îÇ %-6s\n" \
        "Device" "Size" "Type" "Label" "Mount Point" "Usage"
    set_color normal
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
end

# –¢–∞–±–ª–∏—Ü–∞ –¥–∏—Å–∫–æ–≤ - —Å—Ç—Ä–æ–∫–∞
function _disk_table_row
    set -l device $argv[1]
    set -l size $argv[2]
    set -l type $argv[3]
    set -l label $argv[4]
    set -l mountpoint $argv[5]
    set -l usage $argv[6]
    set -l is_system $argv[7]
    set -l device_type $argv[8]  # "disk" –∏–ª–∏ "part"

    # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if test "$is_system" = "yes"
        set_color cyan --dim
        set -l lock "üîí "
        printf "%s%-13s ‚îÇ %-8s ‚îÇ %-6s ‚îÇ %-15s ‚îÇ %-20s ‚îÇ %-6s\n" \
            $lock $device $size $type $label $mountpoint $usage
    else if test "$device_type" = "disk"
        # –§–∏–∑–∏—á–µ—Å–∫–∏–π –¥–∏—Å–∫ - –ø–æ–º–µ—á–∞–µ–º —Å–µ—Ä—ã–º —Å –ø–æ–º–µ—Ç–∫–æ–π
        set_color white --dim
        printf "%-15s ‚îÇ %-8s ‚îÇ %-6s ‚îÇ %-15s ‚îÇ %-20s ‚îÇ %-6s\n" \
            $device $size $type "[physical disk]" $mountpoint $usage
    else if test "$mountpoint" = "-"
        set_color white --dim
        printf "%-15s ‚îÇ %-8s ‚îÇ %-6s ‚îÇ %-15s ‚îÇ %-20s ‚îÇ %-6s\n" \
            $device $size $type $label $mountpoint $usage
    else
        set_color green
        printf "%-15s ‚îÇ %-8s ‚îÇ %-6s ‚îÇ %-15s ‚îÇ %-20s ‚îÇ %-6s\n" \
            $device $size $type $label $mountpoint $usage
    end
    set_color normal
end

# ============================================
# –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –î–ò–°–ö–û–í
# ============================================

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –Ω–∞ –¥–∏—Å–∫–µ —Ä–∞–∑–¥–µ–ª—ã
function _disk_has_partitions
    set -l device $argv[1]

    if not string match -q "/dev/*" $device
        set device "/dev/$device"
    end

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—á–µ—Ä–Ω–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    set -l children (lsblk -nlo NAME $device 2>/dev/null | tail -n +2)

    if test (count $children) -gt 0
        return 0  # –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª—ã
    end

    return 1  # –ø—É—Å—Ç–æ–π –¥–∏—Å–∫
end

# –ü–æ–ª—É—á–∏—Ç—å UUID —Ä–∞–∑–¥–µ–ª–∞
function _disk_get_uuid
    set -l device $argv[1]

    # –î–æ–±–∞–≤–ª—è–µ–º /dev/ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
    if not string match -q "/dev/*" $device
        set device "/dev/$device"
    end

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º blkid –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è UUID
    sudo blkid -s UUID -o value $device 2>/dev/null
end

# –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∫—É –¥–∏—Å–∫–∞
function _disk_get_label
    set -l device $argv[1]

    if not string match -q "/dev/*" $device
        set device "/dev/$device"
    end

    sudo blkid -s LABEL -o value $device 2>/dev/null
end

# –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
function _disk_get_fstype
    set -l device $argv[1]

    if not string match -q "/dev/*" $device
        set device "/dev/$device"
    end

    sudo blkid -s TYPE -o value $device 2>/dev/null
end

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –ª–∏ –¥–∏—Å–∫
function _disk_is_mounted
    set -l device $argv[1]

    if not string match -q "/dev/*" $device
        set device "/dev/$device"
    end

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ findmnt
    if command -v findmnt &>/dev/null
        findmnt -n -o SOURCE $device &>/dev/null
        return $status
    else
        # Fallback –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ mount
        mount | grep -q "^$device "
        return $status
    end
end

# –ü–æ–ª—É—á–∏—Ç—å —Ç–æ—á–∫—É –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function _disk_get_mountpoint
    set -l device $argv[1]

    if not string match -q "/dev/*" $device
        set device "/dev/$device"
    end

    if command -v findmnt &>/dev/null
        findmnt -n -o TARGET $device 2>/dev/null
    else
        mount | grep "^$device " | awk '{print $3}'
    end
end

# –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
function _disk_get_usage
    set -l device $argv[1]

    set -l mountpoint (_disk_get_mountpoint $device)

    if test -z "$mountpoint"
        echo "-"
        return 0
    end

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º df –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    df -h $mountpoint 2>/dev/null | awk 'NR==2 {print $5}'
end

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏—Å–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º
function _disk_is_system
    set -l device $argv[1]

    if not string match -q "/dev/*" $device
        set device "/dev/$device"
    end

    # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    set -l critical_mounts "/" "/boot" "/boot/efi" "/home" "/usr" "/var" "/etc"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—É—Ç–µ–π
    for mount_point in $critical_mounts
        set -l mounted_device (findmnt -n -o SOURCE $mount_point 2>/dev/null)
        # –£–±–∏—Ä–∞–µ–º [subvolume] –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–ª—è btrfs)
        set mounted_device (string replace -r '\[.*\]' '' $mounted_device)
        if string match -q "$device*" $mounted_device
            return 0  # —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –¥–∏—Å–∫!
        end
    end

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º swap
    if swapon --show=NAME --noheadings 2>/dev/null | grep -q "^$device"
        return 0
    end

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π –¥–∏—Å–∫
    set -l label (_disk_get_label $device)
    if string match -qi -r "(fedora|system|root|boot|efi)" $label
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, —Ç–æ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π
        if not _disk_is_mounted $device
            return 1
        end
        return 0
    end

    return 1  # –±–µ–∑–æ–ø–∞—Å–Ω–æ
end

# –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤ —á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
function _disk_get_size
    set -l device $argv[1]

    if not string match -q "/dev/*" $device
        set device "/dev/$device"
    end

    lsblk -ndo SIZE $device 2>/dev/null
end

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏—Å–∫–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
function _disk_list_all
    set -l show_system $argv[1]
    set -l partitions_only $argv[2]  # "yes" - —Ç–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª—ã, –±–µ–∑ —Ü–µ–ª—ã—Ö –¥–∏—Å–∫–æ–≤

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª–æ—á–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ lsblk -P (pairs format)
    lsblk -nPo NAME,SIZE,TYPE,FSTYPE,LABEL,MOUNTPOINT 2>/dev/null | while read -l line
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä—ã KEY="VALUE"
        set -l device (string match -r 'NAME="([^"]*)"' $line)[2]
        set -l size (string match -r 'SIZE="([^"]*)"' $line)[2]
        set -l type (string match -r 'TYPE="([^"]*)"' $line)[2]
        set -l fstype (string match -r 'FSTYPE="([^"]*)"' $line)[2]
        set -l label (string match -r 'LABEL="([^"]*)"' $line)[2]
        set -l mountpoint (string match -r 'MOUNTPOINT="([^"]*)"' $line)[2]

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º loop, rom, zram —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if string match -q -r "loop|rom" $device
            continue
        end
        if string match -q -r "loop|rom" $type
            continue
        end

        # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ü–µ–ª—ã–µ –¥–∏—Å–∫–∏
        if test "$partitions_only" = "yes"
            if test "$type" = "disk"
                continue
            end
        end

        set -l usage (_disk_get_usage $device)
        set -l is_system no

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ª–∏ —ç—Ç–æ –¥–∏—Å–∫
        if _disk_is_system $device
            set is_system yes
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if test "$show_system" != "yes"
                continue
            end
        end

        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π
        if test -z "$size"
            set size "-"
        end
        if test -z "$fstype"
            set fstype "-"
        end
        if test -z "$label"
            set label "-"
        end
        if test -z "$mountpoint"
            set mountpoint "-"
        end
        if test -z "$usage"
            set usage "-"
        end

        # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å | –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        echo "$device|$size|$fstype|$label|$mountpoint|$usage|$is_system|$type"
    end
end

# ============================================
# –ú–û–ù–¢–ò–†–û–í–ê–ù–ò–ï
# ============================================

# –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–æ—á–∫—É –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∫–∏ –∏–ª–∏ —Ä–∞–∑–º–µ—Ä–∞
function _disk_suggest_mountpoint
    set -l device $argv[1]

    if not string match -q "/dev/*" $device
        set device "/dev/$device"
    end

    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∫—É
    set -l label (_disk_get_label $device)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if test -n "$label"
        echo "/mnt/$label"
        return 0
    end

    # –ï—Å–ª–∏ –º–µ—Ç–∫–∏ –Ω–µ—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞
    set -l size (_disk_get_size $device)

    # –ü–∞—Ä—Å–∏–º —Ä–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä "1.8T" –∏–ª–∏ "500G")
    set -l size_num (string match -r '^[0-9.]+' $size)
    set -l size_unit (string match -r '[KMGT]' $size)

    set -l suggested_name "disk"

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ GB –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    switch $size_unit
        case K
            set suggested_name "flash"
        case M
            set suggested_name "flash"
        case G
            if test (math "$size_num < 32") -eq 1
                set suggested_name "flash"
            else if test (math "$size_num < 256") -eq 1
                set suggested_name "ssd"
            else
                set suggested_name "data"
            end
        case T
            set suggested_name "archive"
    end

    echo "/mnt/$suggested_name"
end

# –°–æ–∑–¥–∞—Ç—å —Ç–æ—á–∫—É –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function _disk_create_mountpoint
    set -l mountpoint $argv[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏
    if test -d "$mountpoint"
        return 0
    end

    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    sudo mkdir -p "$mountpoint" 2>/dev/null

    if test $status -ne 0
        _disk_error "–ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é $mountpoint"
        return 1
    end

    return 0
end

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function _disk_set_ownership
    set -l mountpoint $argv[1]
    set -l fstype $argv[2]

    # –î–ª—è ext4/btrfs/xfs - –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if string match -q -r "ext[234]|btrfs|xfs" $fstype
        sudo chown -R $USER:$USER "$mountpoint" 2>/dev/null
        return $status
    end

    # –î–ª—è ntfs/vfat - –ø—Ä–∞–≤–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ uid/gid
    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –æ–Ω–∏ —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
    return 0
end

# –ö–æ–º–∞–Ω–¥–∞: disk mount
function _disk_cmd_mount
    set -l device $argv[1]

    # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä
    if test -z "$device"
        # –ü—Ä–æ–±—É–µ–º fzf
        set device (_disk_select_device unmounted)
        set -l fzf_status $status

        if test $fzf_status -eq 1
            # fzf –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - fallback –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
            echo ""
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å–∫–∏ –¥–ª—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
            echo ""

            set -l disks (_disk_list_all no)
            set -l unmounted_disks

            for disk_info in $disks
                set -l parts (string split "|" $disk_info)
                set -l dev $parts[1]
                set -l mountpoint $parts[5]

                if test "$mountpoint" != "-"
                    continue
                end

                set -a unmounted_disks $disk_info
            end

            if test (count $unmounted_disks) -eq 0
                _disk_warning "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å–∫–æ–≤ –¥–ª—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                return 0
            end

            _disk_table_header
            for disk_info in $unmounted_disks
                set -l parts (string split "|" $disk_info)
                _disk_table_row $parts[1] $parts[2] $parts[3] $parts[4] $parts[5] $parts[6] $parts[7] $parts[8]
            end
            echo ""

            echo "–í–≤–µ–¥–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: sda1):"
            read -l device

            if test -z "$device"
                echo "–û—Ç–º–µ–Ω–µ–Ω–æ"
                return 0
            end
        else if test $fzf_status -eq 2
            _disk_warning "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å–∫–æ–≤ –¥–ª—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            return 0
        else if test $fzf_status -eq 3
            echo "–û—Ç–º–µ–Ω–µ–Ω–æ"
            return 0
        end
    end

    # –î–æ–±–∞–≤–ª—è–µ–º /dev/ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if not string match -q "/dev/*" $device
        set device "/dev/$device"
    end

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if not test -b "$device"
        _disk_error "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ $device –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
        return 1
    end

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –¥–∏—Å–∫
    if _disk_is_system $device
        _disk_error "–≠—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –¥–∏—Å–∫! –û–ø–µ—Ä–∞—Ü–∏—è –ó–ê–ü–†–ï–©–ï–ù–ê!"
        return 1
    end

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
    if _disk_is_mounted $device
        set -l current_mount (_disk_get_mountpoint $device)
        _disk_warning "–î–∏—Å–∫ —É–∂–µ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –≤ $current_mount"
        return 0
    end

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ
    set -l fstype (_disk_get_fstype $device)
    set -l label (_disk_get_label $device)
    set -l size (_disk_get_size $device)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    if test -z "$fstype"
        _disk_error "–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É! –í–æ–∑–º–æ–∂–Ω–æ –¥–∏—Å–∫ –Ω–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω."
        echo "–ò—Å–ø–æ–ª—å–∑—É–π 'disk setup' –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        return 1
    end

    echo ""
    echo "–î–∏—Å–∫: $device"
    echo "  –†–∞–∑–º–µ—Ä: $size"
    echo "  –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: $fstype"
    if test -n "$label"
        echo "  –ú–µ—Ç–∫–∞: $label"
    end
    echo ""

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–æ—á–∫—É –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    set -l suggested_mount (_disk_suggest_mountpoint $device)
    echo "–¢–æ—á–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: $suggested_mount"
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é? [Y/–≤–≤–µ—Å—Ç–∏ –ø—É—Ç—å]"
    read -l mountpoint_choice

    set -l mountpoint $suggested_mount
    if test -n "$mountpoint_choice" -a "$mountpoint_choice" != "y" -a "$mountpoint_choice" != "Y"
        set mountpoint $mountpoint_choice
    end

    # –°–æ–∑–¥–∞—ë–º —Ç–æ—á–∫—É –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if not _disk_create_mountpoint $mountpoint
        return 1
    end

    echo ""
    echo "–ú–æ–Ω—Ç–∏—Ä—É—é $device –≤ $mountpoint..."

    # –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å –æ–ø—Ü–∏—è–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç FS
    switch $fstype
        case "ntfs"
            # –î–ª—è NTFS –∏—Å–ø–æ–ª—å–∑—É–µ–º ntfs-3g —Å –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            set -l uid (id -u)
            set -l gid (id -g)
            sudo mount -t ntfs-3g -o uid=$uid,gid=$gid,umask=0022 $device $mountpoint
        case "vfat" "exfat"
            # –î–ª—è FAT —Ç–æ–∂–µ uid/gid
            set -l uid (id -u)
            set -l gid (id -g)
            sudo mount -o uid=$uid,gid=$gid,umask=0022 $device $mountpoint
        case "*"
            # –î–ª—è ext4/btrfs/xfs - defaults
            sudo mount $device $mountpoint
    end

    if test $status -ne 0
        _disk_error "–û—à–∏–±–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"
        return 1
    end

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è ext4/btrfs/xfs
    _disk_set_ownership $mountpoint $fstype

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
    if _disk_is_mounted $device
        _disk_success "–î–∏—Å–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –≤ $mountpoint!"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        set -l usage (_disk_get_usage $device)
        echo ""
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $usage"
        echo "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: cd $mountpoint"
        echo ""
        echo "–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π:"
        echo "  disk auto $device"
    else
        _disk_error "–ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ –¥–∏—Å–∫ –Ω–µ –≤–∏–¥–µ–Ω –∫–∞–∫ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"
        return 1
    end

    return 0
end

# ============================================
# –ö–û–ú–ê–ù–î–´
# ============================================

# –ü–æ–∫–∞–∑–∞—Ç—å help
function _disk_show_help
    echo ""
    set_color blue --bold
    echo "fishDisk - –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å–∫–∞–º–∏ –¥–ª—è Fedora"
    set_color normal
    echo ""
    echo "–ö–û–ú–ê–ù–î–´:"
    echo ""
    echo "–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã,"
    echo "–±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —É–¥–æ–±–Ω—ã–π –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ fzf (—Å—Ç—Ä–µ–ª–∫–∏ + Enter)."
    echo ""

    set_color green
    echo "  disk list [--all]"
    set_color normal
    echo "    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª—ã"
    echo "    --all - –≤–∫–ª—é—á–∞—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Å–∫–∏"
    echo ""

    set_color green
    echo "  disk mount [—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ]"
    set_color normal
    echo "    –ü—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Å–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞"
    echo "    ‚Ä¢ –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —á–µ—Ä–µ–∑ fzf"
    echo "    ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–æ—á–∫—É –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    echo "    ‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    echo "    ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ext4, btrfs, xfs, ntfs, vfat, exfat"
    echo ""

    set_color green
    echo "  disk auto [—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ]"
    set_color normal
    echo "    –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏—Å–∫ –≤ /etc/fstab"
    echo "    ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: disk auto sda2)"
    echo "    ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç UUID"
    echo "    ‚Ä¢ –°–æ–∑–¥–∞–µ—Ç backup fstab –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º"
    echo "    ‚Ä¢ –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ mount -a"
    echo "    ‚Ä¢ –û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ"
    echo ""

    set_color green
    echo "  disk setup [—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ]"
    set_color normal
    echo "    –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Å–∫–∞ (–≤—Å—ë –≤ –æ–¥–Ω–æ–º)"
    echo "    ‚Ä¢ –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π wizard —Å –≤—ã–±–æ—Ä–æ–º –¥–∏—Å–∫–∞"
    echo "    ‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –§–° (ext4/btrfs/xfs/ntfs/exfat)"
    echo "    ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ç–∫–∏ –¥–∏—Å–∫–∞ (—Å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–µ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)"
    echo "    ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∞–º–∏"
    echo "    ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ fstab"
    echo ""

    set_color green
    echo "  disk unmount [—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ|—Ç–æ—á–∫–∞]"
    set_color normal
    echo "    –†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Å–∫"
    echo "    ‚Ä¢ –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤"
    echo "    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã (–±—ã—Å—Ç—Ä–æ —á–µ—Ä–µ–∑ fuser)"
    echo "    ‚Ä¢ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç –∏–∑ fstab"
    echo ""

    set_color green
    echo "  disk fix [—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ|—Ç–æ—á–∫–∞]"
    set_color normal
    echo "    –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –¥–∏—Å–∫–µ"
    echo "    ‚Ä¢ –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –¥–∏—Å–∫–æ–≤"
    echo "    ‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –ø—Ä–∞–≤"
    echo "    ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ chown/chmod"
    echo ""

    echo "–û–ü–¶–ò–ò:"
    echo "  --help, -h             –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo "  --version, -v          –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é"
    echo ""

    set_color yellow --bold
    echo "–ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:"
    set_color normal
    echo ""
    echo "1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å–∫–∏:"
    echo "   disk list"
    echo ""
    echo "2. –ü—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏—Å–∫:"
    echo "   disk mount sda2"
    echo "   disk auto sda2          # –î–æ–±–∞–≤–∏—Ç—å –≤ fstab –¥–ª—è –∞–≤—Ç–æ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    echo ""
    echo "3. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π –¥–∏—Å–∫ (–≤—Å—ë –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ):"
    echo "   disk setup"
    echo "   ‚Üí –í—ã–±–∏—Ä–∞–µ—à—å –¥–∏—Å–∫ —á–µ—Ä–µ–∑ fzf"
    echo "   ‚Üí –í—ã–±–∏—Ä–∞–µ—à—å —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (ext4/btrfs/xfs)"
    echo "   ‚Üí –í–≤–æ–¥–∏—à—å –º–µ—Ç–∫—É –¥–∏—Å–∫–∞"
    echo "   ‚Üí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å —á–µ—Ä–µ–∑ DELETE"
    echo "   ‚Üí –ì–æ—Ç–æ–≤–æ! –î–∏—Å–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω, –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –∏ –≤ fstab"
    echo ""

    set_color cyan
    echo "WORKFLOW –ü–†–ò–ú–ï–†–´:"
    set_color normal
    echo ""
    echo "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å–∫ Windows (NTFS) –≤ —Å–∏—Å—Ç–µ–º—É:"
    echo "  disk mount sda2           # –ú–æ–Ω—Ç–∏—Ä—É–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ uid/gid"
    echo "  disk auto sda2            # –î–æ–±–∞–≤–ª—è–µ—Ç –≤ fstab"
    echo ""
    echo "‚Ä¢ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–ª–µ—à–∫—É –≤ exFAT:"
    echo "  disk setup sdb1           # Wizard —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    echo ""
    echo "‚Ä¢ –†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Å–∫ –ø–µ—Ä–µ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º:"
    echo "  disk unmount /mnt/flash   # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo ""
    echo "‚Ä¢ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏:"
    echo "  disk fix /mnt/data        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ fix"
    echo ""

    set_color red
    echo "–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:"
    set_color normal
    echo "  ‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Å–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    echo "  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup /etc/fstab –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏"
    echo "  ‚Ä¢ –î–≤–æ–π–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"
    echo ""
end

# –ö–æ–º–∞–Ω–¥–∞: disk list
function _disk_cmd_list
    set -l show_system no

    # –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø—Ü–∏–π
    for arg in $argv
        switch $arg
            case --all -a --show-system
                set show_system yes
        end
    end

    echo "–°–∫–∞–Ω–∏—Ä—É—é –¥–∏—Å–∫–∏..."
    echo ""

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤
    set -l disks (_disk_list_all $show_system)

    if test -z "$disks"
        _disk_warning "–î–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        return 0
    end

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    _disk_table_header

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–∏—Å–∫
    for disk_info in $disks
        # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å |
        set -l parts (string split "|" $disk_info)
        set -l device $parts[1]
        set -l size $parts[2]
        set -l fstype $parts[3]
        set -l label $parts[4]
        set -l mountpoint $parts[5]
        set -l usage $parts[6]
        set -l is_system $parts[7]
        set -l device_type $parts[8]

        _disk_table_row $device $size $fstype $label $mountpoint $usage $is_system $device_type
    end

    echo ""

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if test "$show_system" = "yes"
        echo ""
        echo "üîí - –°–∏—Å—Ç–µ–º–Ω—ã–π –¥–∏—Å–∫ (–∑–∞—â–∏—â–µ–Ω)"
    else
        echo ""
        echo "–°–æ–≤–µ—Ç: 'disk list --all' –ø–æ–∫–∞–∂–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Å–∫–∏"
    end
end

# ============================================
# –†–ê–ó–ú–û–ù–¢–ò–†–û–í–ê–ù–ò–ï
# ============================================

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ –¥–∏—Å–∫–µ (–±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è)
function _disk_check_open_files
    set -l mountpoint $argv[1]

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º fuser (–±—ã—Å—Ç—Ä–µ–µ —á–µ–º lsof +D)
    if command -v fuser &>/dev/null
        # fuser –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã
        sudo fuser -m "$mountpoint" &>/dev/null
        if test $status -eq 0
            return 1  # –ï—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
        end
    end

    return 0  # –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
end

# –ö–æ–º–∞–Ω–¥–∞: disk unmount
function _disk_cmd_unmount
    set -l target $argv[1]

    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä
    if test -z "$target"
        # –ü—Ä–æ–±—É–µ–º fzf
        set target (_disk_select_device mounted)
        set -l fzf_status $status

        if test $fzf_status -eq 1
            # fzf –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - fallback
            echo ""
            echo "–ü—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏—Å–∫–∏:"
            echo ""

            set -l disks (_disk_list_all no)
            set -l mounted_disks

            for disk_info in $disks
                set -l parts (string split "|" $disk_info)
                set -l dev $parts[1]
                set -l mountpoint $parts[5]

                if test "$mountpoint" = "-"
                    continue
                end

                set -a mounted_disks $disk_info
            end

            if test (count $mounted_disks) -eq 0
                _disk_warning "–ù–µ—Ç –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤ –¥–ª—è —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                return 0
            end

            _disk_table_header
            for disk_info in $mounted_disks
                set -l parts (string split "|" $disk_info)
                _disk_table_row $parts[1] $parts[2] $parts[3] $parts[4] $parts[5] $parts[6] $parts[7] $parts[8]
            end
            echo ""

            echo "–í–≤–µ–¥–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ —Ç–æ—á–∫—É –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: sda1 –∏–ª–∏ /mnt/data):"
            read -l target

            if test -z "$target"
                echo "–û—Ç–º–µ–Ω–µ–Ω–æ"
                return 0
            end
        else if test $fzf_status -eq 2
            _disk_warning "–ù–µ—Ç –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤ –¥–ª—è —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            return 0
        else if test $fzf_status -eq 3
            echo "–û—Ç–º–µ–Ω–µ–Ω–æ"
            return 0
        end
    end

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ —Ç–æ—á–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    set -l device ""
    set -l mountpoint ""

    if string match -q "/dev/*" $target
        set device $target
        set mountpoint (_disk_get_mountpoint $device)
    else if string match -q "/*" $target
        set mountpoint $target
        # –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —Ç–æ—á–∫–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        set device (findmnt -n -o SOURCE "$mountpoint" 2>/dev/null)
    else
        # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        set device "/dev/$target"
        set mountpoint (_disk_get_mountpoint $device)
    end

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Å–∫ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
    if test -z "$mountpoint"
        _disk_error "–î–∏—Å–∫ –Ω–µ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    end

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π
    if _disk_is_system $device
        _disk_error "–≠—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –¥–∏—Å–∫! –†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ó–ê–ü–†–ï–©–ï–ù–û!"
        return 1
    end

    echo ""
    echo "–†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:"
    echo "  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: $device"
    echo "  –¢–æ—á–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: $mountpoint"
    echo ""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
    if not _disk_check_open_files "$mountpoint"
        _disk_warning "–ù–∞ –¥–∏—Å–∫–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã!"
        echo ""
        echo "–ü—Ä–æ—Ü–µ—Å—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –¥–∏—Å–∫:"
        sudo fuser -vm "$mountpoint" 2>/dev/null
        echo ""
        echo "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å? [y/N]"
        read -l force

        if test "$force" != "y" -a "$force" != "Y"
            echo "–û—Ç–º–µ–Ω–µ–Ω–æ"
            return 0
        end
    end

    # –†–∞–∑–º–æ–Ω—Ç–∏—Ä—É–µ–º
    echo "–†–∞–∑–º–æ–Ω—Ç–∏—Ä—É—é..."
    sudo umount "$mountpoint"

    if test $status -ne 0
        _disk_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å!"
        echo "–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:"
        echo "  sudo umount -l $mountpoint"
        return 1
    end

    _disk_success "–î–∏—Å–∫ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω!"

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ fstab
    if grep -q "$device" /etc/fstab 2>/dev/null
        echo ""
        echo "–î–∏—Å–∫ –ø—Ä–æ–ø–∏—Å–∞–Ω –≤ /etc/fstab (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)"
        echo "–£–¥–∞–ª–∏—Ç—å –∏–∑ fstab? [y/N]"
        read -l remove_fstab

        if test "$remove_fstab" = "y" -o "$remove_fstab" = "Y"
            # –°–æ–∑–¥–∞—ë–º backup
            sudo cp /etc/fstab /etc/fstab.backup.(date +%Y%m%d_%H%M%S)

            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
            sudo sed -i "\|$device|d" /etc/fstab

            _disk_success "–£–¥–∞–ª–µ–Ω–æ –∏–∑ fstab"
        end
    end

    return 0
end

# ============================================
# –†–ê–ë–û–¢–ê –° FSTAB
# ============================================

# –ö–æ–º–∞–Ω–¥–∞: disk auto - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ fstab –¥–ª—è –∞–≤—Ç–æ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function _disk_cmd_auto
    set -l device $argv[1]

    if test -z "$device"
        echo ""
        set_color yellow
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: disk auto <—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ>"
        set_color normal
        echo ""
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  disk auto sda1"
        echo "  disk auto /dev/sda1"
        echo ""
        echo "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏—Å–∫ –≤ /etc/fstab"
        echo "–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã."
        return 1
    end

    # –î–æ–±–∞–≤–ª—è–µ–º /dev/ –µ—Å–ª–∏ –Ω–µ—Ç
    if not string match -q "/dev/*" $device
        set device "/dev/$device"
    end

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    if not test -b "$device"
        _disk_error "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ $device –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
        return 1
    end

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ
    if _disk_is_system $device
        _disk_error "–≠—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –¥–∏—Å–∫!"
        return 1
    end

    # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
    if not _disk_is_mounted $device
        _disk_error "–î–∏—Å–∫ –Ω–µ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏: disk mount $device"
        return 1
    end

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    set -l mountpoint (_disk_get_mountpoint $device)
    set -l fstype (_disk_get_fstype $device)
    set -l uuid (_disk_get_uuid $device)
    set -l label (_disk_get_label $device)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ
    if grep -q "$uuid" /etc/fstab 2>/dev/null
        _disk_warning "–î–∏—Å–∫ —É–∂–µ –µ—Å—Ç—å –≤ fstab"
        return 0
    end

    echo ""
    echo "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ /etc/fstab:"
    echo "  UUID: $uuid"
    echo "  –¢–æ—á–∫–∞: $mountpoint"
    echo "  –§–°: $fstype"
    if test -n "$label"
        echo "  –ú–µ—Ç–∫–∞: $label"
    end
    echo ""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ü–∏–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    set -l mount_opts "defaults"
    switch $fstype
        case "ext4" "ext3" "ext2"
            set mount_opts "defaults,noatime"
        case "btrfs"
            set mount_opts "defaults,noatime,compress=zstd"
        case "xfs"
            set mount_opts "defaults,noatime"
        case "ntfs"
            set -l uid (id -u)
            set -l gid (id -g)
            set mount_opts "defaults,uid=$uid,gid=$gid,umask=0022"
        case "vfat" "exfat"
            set -l uid (id -u)
            set -l gid (id -g)
            set mount_opts "defaults,uid=$uid,gid=$gid,umask=0022"
    end

    # –°–æ–∑–¥–∞—ë–º backup fstab
    sudo cp /etc/fstab /etc/fstab.backup.(date +%Y%m%d_%H%M%S)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
    set -l comment ""
    if test -n "$label"
        set comment "# $label"
    end

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ fstab
    echo "$comment" | sudo tee -a /etc/fstab >/dev/null
    echo "UUID=$uuid  $mountpoint  $fstype  $mount_opts  0  2" | sudo tee -a /etc/fstab >/dev/null

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º
    echo "–¢–µ—Å—Ç–∏—Ä—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
    sudo mount -a

    if test $status -ne 0
        _disk_error "–û—à–∏–±–∫–∞ –≤ fstab! –û—Ç–∫–∞—Ç—ã–≤–∞—é –∏–∑–º–µ–Ω–µ–Ω–∏—è..."
        sudo mv /etc/fstab.backup.(date +%Y%m%d_%H%M%S | tail -1) /etc/fstab
        return 1
    end

    _disk_success "–î–∏—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ fstab! –ë—É–¥–µ—Ç –º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ"

    return 0
end

# ============================================
# –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï
# ============================================

# –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª –Ω–∞ –≤–µ—Å—å –¥–∏—Å–∫
function _disk_create_partition
    set -l device $argv[1]

    if not string match -q "/dev/*" $device
        set device "/dev/$device"
    end

    echo "–°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É —Ä–∞–∑–¥–µ–ª–æ–≤ GPT..."

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º parted –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è GPT –∏ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞ –≤–µ—Å—å –¥–∏—Å–∫
    sudo parted -s $device mklabel gpt
    if test $status -ne 0
        return 1
    end

    echo "–°–æ–∑–¥–∞—é —Ä–∞–∑–¥–µ–ª –Ω–∞ –≤–µ—Å—å –¥–∏—Å–∫..."
    sudo parted -s $device mkpart primary 0% 100%
    if test $status -ne 0
        return 1
    end

    # –ñ–¥—ë–º –ø–æ–∫–∞ —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏—Ç –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª
    sleep 2
    sudo partprobe $device 2>/dev/null

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (–æ–±—ã—á–Ω–æ —ç—Ç–æ device + 1)
    set -l partition_name
    if string match -qr 'nvme|mmcblk' $device
        set partition_name "$device"p1
    else
        set partition_name "$device"1
    end

    echo $partition_name
    return 0
end

# –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–∫–∏
function _disk_validate_label
    set -l label $argv[1]
    set -l fstype $argv[2]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
    if string match -qr '[–∞-—è–ê-–Ø—ë–Å]' $label
        return 2
    end

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    switch $fstype
        case ext4 ext3 ext2
            if test (string length $label) -gt 16
                return 1
            end
        case xfs
            if test (string length $label) -gt 12
                return 1
            end
        case ntfs
            if test (string length $label) -gt 32
                return 1
            end
        case vfat exfat
            if test (string length $label) -gt 11
                return 1
            end
    end

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
    if not string match -qr '^[a-zA-Z0-9_-]+$' $label
        return 1
    end

    return 0
end

# –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
function _disk_transliterate
    set -l text $argv[1]
    echo $text | sed '
        y/–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è/abvgdeyozhzijklmnoprstufhts—áshsh_y_eyuya/
        y/–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø/ABVGDEYOZHZIJKLMNOPRSTUFHTS–ßSHSH_Y_EYUYA/
    '
end

# –ö–æ–º–∞–Ω–¥–∞: disk setup - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
function _disk_cmd_setup
    set -l device $argv[1]

    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –¥–∏—Å–∫–∞
    if test -z "$device"
        # –ü—Ä–æ–±—É–µ–º fzf —Å —Ä–µ–∂–∏–º–æ–º setup (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª—ã + –ø—É—Å—Ç—ã–µ –¥–∏—Å–∫–∏)
        set device (_disk_select_device setup)
        set -l fzf_status $status

        if test $fzf_status -eq 1
            # fzf –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - fallback
            echo ""
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏—Å–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
            echo ""

            set -l disks (_disk_list_all no)
            set -l safe_disks

            for disk_info in $disks
                set -l parts (string split "|" $disk_info)
                set -a safe_disks $disk_info
            end

            if test (count $safe_disks) -eq 0
                _disk_warning "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å–∫–æ–≤"
                return 0
            end

            _disk_table_header
            for disk_info in $safe_disks
                set -l parts (string split "|" $disk_info)
                _disk_table_row $parts[1] $parts[2] $parts[3] $parts[4] $parts[5] $parts[6] $parts[7] $parts[8]
            end
            echo ""

            echo "–í–≤–µ–¥–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: sda1):"
            read -l device

            if test -z "$device"
                echo "–û—Ç–º–µ–Ω–µ–Ω–æ"
                return 0
            end
        else if test $fzf_status -eq 2
            _disk_warning "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å–∫–æ–≤"
            return 0
        else if test $fzf_status -eq 3
            echo "–û—Ç–º–µ–Ω–µ–Ω–æ"
            return 0
        end
    end

    # –î–æ–±–∞–≤–ª—è–µ–º /dev/
    if not string match -q "/dev/*" $device
        set device "/dev/$device"
    end

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not test -b "$device"
        _disk_error "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
        return 1
    end

    if _disk_is_system $device
        _disk_error "–≠—Ç–æ –°–ò–°–¢–ï–ú–ù–´–ô –¥–∏—Å–∫! –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û!"
        return 1
    end

    if _disk_is_mounted $device
        _disk_error "–î–∏—Å–∫ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω! –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä—É–π: disk unmount $device"
        return 1
    end

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–æ –ø—É—Å—Ç–æ–π –¥–∏—Å–∫ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª
    set -l is_empty_disk no
    set -l device_type (lsblk -ndo TYPE $device 2>/dev/null)

    if test "$device_type" = "disk"
        if not _disk_has_partitions $device
            set is_empty_disk yes
        end
    end

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ
    set -l size (_disk_get_size $device)
    set -l current_fs (_disk_get_fstype $device)
    set -l current_label (_disk_get_label $device)

    echo ""
    set_color red --bold
    echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –í–°–ï –î–ê–ù–ù–´–ï –ë–£–î–£–¢ –£–î–ê–õ–ï–ù–´! ‚ö†Ô∏è"
    set_color normal
    echo ""
    echo "–î–∏—Å–∫: $device"
    echo "  –†–∞–∑–º–µ—Ä: $size"
    if test "$is_empty_disk" = "yes"
        echo "  –¢–∏–ø: –ü—É—Å—Ç–æ–π –¥–∏—Å–∫ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ä–∞–∑–¥–µ–ª GPT)"
    else
        if test -n "$current_fs"
            echo "  –¢–µ–∫—É—â–∞—è –§–°: $current_fs"
        end
        if test -n "$current_label"
            echo "  –¢–µ–∫—É—â–∞—è –º–µ—Ç–∫–∞: $current_label"
        end
    end
    echo ""

    # –í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    echo "–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É:"
    echo "  1) ext4      (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è Linux)"
    echo "  2) btrfs     (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å snapshots)"
    echo "  3) xfs       (–¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤)"
    echo "  4) ntfs      (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Windows)"
    echo "  5) exfat     (USB, –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è)"
    echo ""
    echo "–í—ã–±–æ—Ä [1-5]:"
    read -l fs_choice

    set -l fstype ""
    switch $fs_choice
        case 1
            set fstype "ext4"
        case 2
            set fstype "btrfs"
        case 3
            set fstype "xfs"
        case 4
            set fstype "ntfs"
        case 5
            set fstype "exfat"
        case '*'
            echo "–û—Ç–º–µ–Ω–µ–Ω–æ"
            return 0
    end

    # –ó–∞–ø—Ä–æ—Å –º–µ—Ç–∫–∏
    echo ""
    echo "–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç–∫—É –¥–∏—Å–∫–∞:"
    echo "  –ü—Ä–∏–º–µ—Ä—ã: Data, Backup, Games, Storage"
    echo "  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, _-  (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)"
    echo ""
    read -l label

    if test -z "$label"
        _disk_error "–ú–µ—Ç–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞!"
        return 1
    end

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Ç–∫–∏
    _disk_validate_label "$label" "$fstype"
    set -l validate_result $status

    if test $validate_result -eq 2
        # –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
        set -l transliterated (_disk_transliterate "$label")
        echo ""
        _disk_warning "–ö–∏—Ä–∏–ª–ª–∏—Ü–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!"
        echo "–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ '$transliterated'? [Y/n]"
        read -l trans_choice

        if test "$trans_choice" != "n" -a "$trans_choice" != "N"
            set label $transliterated
        else
            _disk_error "–ò—Å–ø–æ–ª—å–∑—É–π –ª–∞—Ç–∏–Ω–∏—Ü—É –¥–ª—è –º–µ—Ç–∫–∏"
            return 1
        end
    else if test $validate_result -eq 1
        _disk_error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–µ—Ç–∫–∞! –ü—Ä–æ–≤–µ—Ä—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è."
        return 1
    end

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    echo ""
    set_color red --bold
    echo "–ü–û–°–õ–ï–î–ù–ï–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï!"
    set_color normal
    echo ""
    echo "–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:"
    echo "  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: $device ($size)"
    echo "  –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞: $fstype"
    echo "  –ú–µ—Ç–∫–∞: $label"
    echo ""
    echo "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏ —Å–ª–æ–≤–æ DELETE:"
    read -l confirmation

    if test "$confirmation" != "DELETE"
        echo "–û—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    end

    # –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π –¥–∏—Å–∫ - —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º —Ä–∞–∑–¥–µ–ª
    set -l target_device $device
    if test "$is_empty_disk" = "yes"
        echo ""
        echo "–≠—Ç–æ –ø—É—Å—Ç–æ–π –¥–∏—Å–∫. –°–æ–∑–¥–∞—é —Ä–∞–∑–¥–µ–ª –Ω–∞ –≤–µ—Å—å –æ–±—ä—ë–º..."

        set target_device (_disk_create_partition $device)
        if test $status -ne 0
            _disk_error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞!"
            return 1
        end

        echo "–°–æ–∑–¥–∞–Ω —Ä–∞–∑–¥–µ–ª: $target_device"
        echo ""
    end

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    echo "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å..."

    switch $fstype
        case ext4
            sudo mkfs.ext4 -L "$label" $target_device
        case btrfs
            sudo mkfs.btrfs -L "$label" $target_device
        case xfs
            sudo mkfs.xfs -L "$label" $target_device
        case ntfs
            sudo mkfs.ntfs -L "$label" -f $target_device
        case exfat
            sudo mkfs.exfat -n "$label" $target_device
    end

    if test $status -ne 0
        _disk_error "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"
        return 1
    end

    _disk_success "–î–∏—Å–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω!"

    # –û–±–Ω–æ–≤–ª—è–µ–º device –Ω–∞ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    set device $target_device

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
    echo ""
    echo "–ü—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Å–∫ —Å–µ–π—á–∞—Å? [Y/n]"
    read -l mount_now

    if test "$mount_now" != "n" -a "$mount_now" != "N"
        _disk_cmd_mount $device

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –≤ fstab
        if _disk_is_mounted $device
            echo ""
            echo "–î–æ–±–∞–≤–∏—Ç—å –≤ fstab (–∞–≤—Ç–æ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ)? [Y/n]"
            read -l auto_mount

            if test "$auto_mount" != "n" -a "$auto_mount" != "N"
                _disk_cmd_auto $device
            end
        end
    end

    return 0
end

# ============================================
# –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
# ============================================

# –ö–æ–º–∞–Ω–¥–∞: disk fix
function _disk_cmd_fix
    set -l target $argv[1]

    echo ""
    echo "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"
    echo ""

    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –≤—ã–±–æ—Ä
    if test -z "$target"
        # –ü—Ä–æ–±—É–µ–º fzf
        set target (_disk_select_device mounted)
        set -l fzf_status $status

        if test $fzf_status -eq 1
            # fzf –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - fallback
            echo "–ü—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏—Å–∫–∏:"
            echo ""

            set -l disks (_disk_list_all no)
            set -l mounted_disks

            for disk_info in $disks
                set -l parts (string split "|" $disk_info)
                set -l mountpoint $parts[5]

                if test "$mountpoint" = "-"
                    continue
                end

                set -a mounted_disks $disk_info
            end

            if test (count $mounted_disks) -eq 0
                _disk_warning "–ù–µ—Ç –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤"
                return 0
            end

            _disk_table_header
            for disk_info in $mounted_disks
                set -l parts (string split "|" $disk_info)
                _disk_table_row $parts[1] $parts[2] $parts[3] $parts[4] $parts[5] $parts[6] $parts[7] $parts[8]
            end
            echo ""

            echo "–í–≤–µ–¥–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ —Ç–æ—á–∫—É –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
            read -l target

            if test -z "$target"
                echo "–û—Ç–º–µ–Ω–µ–Ω–æ"
                return 0
            end
        else if test $fzf_status -eq 2
            _disk_warning "–ù–µ—Ç –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤"
            return 0
        else if test $fzf_status -eq 3
            echo "–û—Ç–º–µ–Ω–µ–Ω–æ"
            return 0
        end
    end

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ —Ç–æ—á–∫—É
    set -l device ""
    set -l mountpoint ""

    if string match -q "/dev/*" $target
        set device $target
        set mountpoint (_disk_get_mountpoint $device)
    else if string match -q "/*" $target
        set mountpoint $target
        set device (findmnt -n -o SOURCE "$mountpoint" 2>/dev/null)
    else
        set device "/dev/$target"
        set mountpoint (_disk_get_mountpoint $device)
    end

    if test -z "$mountpoint"
        _disk_error "–î–∏—Å–∫ –Ω–µ –ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω"
        return 1
    end

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    set -l fstype (_disk_get_fstype $device)
    set -l owner (stat -c %U:%G "$mountpoint" 2>/dev/null)
    set -l perms (stat -c %a "$mountpoint" 2>/dev/null)

    echo ""
    echo "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ $mountpoint:"
    echo "  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: $device"
    echo "  –§–°: $fstype"
    echo "  –í–ª–∞–¥–µ–ª–µ—Ü: $owner"
    echo "  –ü—Ä–∞–≤–∞: $perms"
    echo ""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    set -l needs_fix no

    if test "$owner" != "$USER:$USER"
        echo "–ü—Ä–æ–±–ª–µ–º–∞: –≤–ª–∞–¥–µ–ª–µ—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å $USER:$USER"
        set needs_fix yes
    end

    if test $needs_fix = no
        _disk_success "–ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!"
        return 0
    end

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å
    echo ""
    echo "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞? [Y/n]"
    read -l fix_choice

    if test "$fix_choice" = "n" -o "$fix_choice" = "N"
        echo "–û—Ç–º–µ–Ω–µ–Ω–æ"
        return 0
    end

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º
    echo "–ò—Å–ø—Ä–∞–≤–ª—è—é –ø—Ä–∞–≤–∞..."

    if string match -q -r "ext[234]|btrfs|xfs" $fstype
        sudo chown -R $USER:$USER "$mountpoint"
        sudo chmod 755 "$mountpoint"
    end

    _disk_success "–ü—Ä–∞–≤–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!"

    return 0
end

# ============================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ============================================

function disk --description "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å–∫–∞–º–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not _disk_check_dependencies
        return 1
    end

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    set -l command $argv[1]
    set -l args $argv[2..-1]

    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º help
    if test -z "$command"
        _disk_show_help
        return 0
    end

    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    switch $command
        case list ls
            _disk_cmd_list $args
        case mount m
            _disk_cmd_mount $args
        case unmount umount eject
            _disk_cmd_unmount $args
        case auto
            _disk_cmd_auto $args
        case setup add format
            _disk_cmd_setup $args
        case fix repair
            _disk_cmd_fix $args
        case help -h --help
            _disk_show_help
        case version -v --version
            echo "fishDisk v0.1.0"
        case '*'
            _disk_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            echo ""
            _disk_show_help
            return 1
    end
end
